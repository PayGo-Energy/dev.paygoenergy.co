{"version":3,"sources":["Header.js","Markdown.js","job-ad.js","Jobs.js","serviceWorker.js","index.js","App.js"],"names":["Header","classes","this","props","react_default","a","createElement","react","AppBar","position","color","Toolbar","className","headerBackground","Link","href","alt","src","logo","Typography","variant","grow","Component","withStyles","height","marginRight","backgroundColor","flexGrow","menuButton","marginLeft","options","overrides","h1","component","Object","assign","gutterBottom","h2","h3","h4","paragraph","p","li","theme","listItem","marginTop","spacing","_ref","objectWithoutProperties","Markdown","esm","jobAd","Jobs","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","CssBaseline","src_Header","Container","maxWidth","react_router","exact","path","from","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1fdbe22.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Link from '@material-ui/core/Link';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  logo: { height:'2em', marginRight:'1em' },\n  headerBackground: { backgroundColor:'#00254a', color:'white' },\n  grow: { flexGrow:1 },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\nclass Header extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <Fragment>\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar className={classes.headerBackground}>\n            <Link href=\"https://www.paygoenergy.co\">\n              <img alt=\"PayGo Energy\" src=\"https://s3.us-east-2.amazonaws.com/paygoenergy/img/icons/logo-menubar.svg\" className={classes.logo}/>\n            </Link>\n            <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n              Software Engineering Jobs\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(Header);\n\n","/**\n * Copied from https://github.com/mui-org/material-ui/blob/master/docs/src/pages/getting-started/page-layout-examples/blog/Markdown.js\n */\n\nimport React from 'react';\nimport ReactMarkdown from 'markdown-to-jsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nconst styles = theme => ({\n  listItem: {\n    marginTop: theme.spacing(1),\n  },\n});\n\nconst options = {\n  overrides: {\n    h1: { component: props => <Typography gutterBottom variant=\"h4\" {...props} /> },\n    h2: { component: props => <Typography gutterBottom variant=\"h6\" {...props} /> },\n    h3: { component: props => <Typography gutterBottom variant=\"subtitle1\" {...props} /> },\n    h4: { component: props => <Typography gutterBottom variant=\"caption\" paragraph {...props} /> },\n    p: { component: props => <Typography paragraph {...props} /> },\n    a: { component: Link },\n    li: {\n      component: withStyles(styles)(({ classes, ...props }) => (\n        <li className={classes.listItem}>\n          <Typography component=\"span\" {...props} />\n        </li>\n      )),\n    },\n  },\n};\n\nexport default function Markdown(props) {\n  return <ReactMarkdown options={options} {...props} />;\n}\n","// For some reason, react doesn't like multi-line strings using backticks, but\n// the following verbose mess seems to be fine <o_O>\nconst jobAd =\n'# Software Engineer\\n' +\n'\\n' +\n'[PayGo Energy](https://www.paygoenergy.co) are looking for a senior engineer to join our product-focussed, agile team to help develop and support live services in a rapidly-growing startup.\\n' +\n'\\n' +\n'\\n' +\n'## We\\n' +\n'\\n' +\n'* use kanban\\n' +\n'* work in deliverable-focussed ~fortnightly iterations\\n' +\n'* deliver incremental improvements to our users frequently\\n' +\n'* continuously build and deploy to Google Cloud Platform with k8s and docker\\n' +\n'* release multiple times per week\\n' +\n'* develop with modern javascript (ES8) for the whole stack, on nodejs, react and react-native\\n' +\n'* use proper industry-proven databases (PostgreSQL)\\n' +\n'* actively monitor and support live environments\\n' +\n'* work closely with our hardware team to integrate with hundreds of IoT devices\\n' +\n'* constantly work to reduce our support load while increasing our userbase\\n' +\n'* work from our quiet Nairobi office in Bishop Magua Centre (Kilimani)\\n' +\n'\\n' +\n'\\n' +\n'## You\\n' +\n'\\n' +\n'* are quick to pick up new technologies and frameworks\\n' +\n'* believe in writing quality code and helping other team members do the same\\n' +\n'* enjoy collaborating closely with team mates within and outside of software\\n' +\n'* want to join a fast-paced, growing team\\n' +\n'* are keen to gain experience and share your own with colleagues\\n' +\n'\\n' +\n'\\n' +\n'## So\\n' +\n'\\n' +\n'If that sounds like you, send CV/cover letter/linkedin/github to [software-hiring@paygoenergy.co](mailto:software-hiring@paygoenergy.co) (yes, `.co`).\\n' +\n'\\n' +\n'If you don\\'t think you have the skills or experience necessary _yet_, drop us your CV and cover letter anyway - **we\\'re also hiring junior and mid-level developers**, and are always looking for enthusiastic and talented people to join our team.\\n' +\n'';\n\nexport default jobAd;\n","import React from 'react';\n\nimport Markdown from './Markdown';\n\nimport jobAd from './job-ad';\n\nexport default function Jobs() {\n  return (\n    <Markdown>\n      {jobAd}\n    </Markdown>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\n\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport Header from './Header';\nimport Jobs from './Jobs';\n\nimport './App.css'; // please replace this CSS with proper material-ui-tailored JSS at some point\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <CssBaseline/>\n      <Header/>\n      <Container maxWidth=\"lg\" className=\"content-container\">\n        <Switch>\n          <Route exact path=\"/jobs/\" component={Jobs} />\n          <Redirect from=\"/\" to=\"/jobs/\" component={Jobs} />\n        </Switch>\n      </Container>\n    </BrowserRouter>\n  );\n};\n"],"sourceRoot":""}